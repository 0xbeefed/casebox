Ext.namespace('CB');

CB.VerticalEditGrid = Ext.extend(Ext.grid.EditorGridPanel, {
    border: false
    ,root: 'data'
    ,cls: 'spacy-rows'
    ,autoScroll: true

    ,initComponent: function() {

        var fields = [
            'id' // it's varchar generated by Ext
            ,'title'
            ,'readonly'
            ,'value'
            ,'info'
            ,'type'
            ,'cond' //condition used for search templates
        ];

        // define helperTree if owner does not have already defined one
        var parentWindow = this.getBubbleTarget();
        if(parentWindow.helperTree) {
            this.helperTree = parentWindow.helperTree;
        } else {
            this.helperTree = new CB.VerticalEditGridHelperTree();
        }

        this.initRenderers();
        this.initColumns();

        var viewCfg = {
            autoFill: false
            ,getRowClass: function( record, index, rowParams, store ){
                var rez = '';
                if(record.get('type') == 'H'){
                    rez = 'group-titles-colbg';
                    var node = this.grid.helperTree.getNode(record.get('id'));
                    if(node && !Ext.isEmpty(node.attributes.templateRecord.get('cfg').css)){
                        rez += ' ' + node.attributes.templateRecord.get('cfg').css;
                    }
                }
                return rez;
            }
        };
        if(this.viewConfig) {
            Ext.apply(viewCfg, this.viewConfig);
        }

        Ext.apply(this, {
            store:  new Ext.data.JsonStore({
                fields: fields
                ,reader: new Ext.data.JsonReader({
                    idProperty: 'id'
                    ,messageProperty: 'msg'
                })
                ,proxy: new Ext.data.MemoryProxy([])
                ,listeners: {
                    scope: this
                    ,update: function(store, record, operation) {
                        if(operation != Ext.data.Record.EDIT) {
                            return;
                        }
                        var node = this.helperTree.getNode(record.get('id'));
                        node.attributes.value['value'] = record.get('value');
                        node.attributes.value['info'] = record.get('info');
                        node.attributes.value['cond'] = record.get('cond');
                    }
                }
            })
            ,columns: Ext.apply([], this.gridColumns) //leave default column definitions intact
            ,sm: new Ext.grid.CellSelectionModel()
            ,stripeRows: true
            ,header: false
            ,clicksToEdit: 1
            ,listeners: {
                scope: this
                ,beforeedit: this.onBeforeEditProperty
                ,afteredit: this.onAfterEditProperty
                ,keypress:  function(e){
                    if( (e.getKey() == e.ENTER) && (!e.hasModifier())) {
                        this.onFieldTitleDblClick();
                    }
                }
                ,celldblclick:  this.onFieldTitleDblClick
                ,cellclick:  this.onCellClick
                ,cellcontextmenu: this.onPopupMenu
            }
            ,statefull: true
            ,stateId: Ext.value(this.stateId, 'veg')//vertical edit grid
            ,viewConfig: viewCfg
            ,editors: {
                iconcombo: function(){
                    return new Ext.form.ComboBox({
                        editable: true
                        ,name: 'iconCls'
                        ,hiddenName: 'iconCls'
                        ,tpl: '<tpl for="."><div class="x-combo-list-item icon-padding16 {name}">{name}</div></tpl>'
                        ,store: CB.DB.templatesIconSet
                        ,valueField: 'name'
                        ,displayField: 'name'
                        ,iconClsField: 'name'
                        ,triggerAction: 'all'
                        ,mode: 'local'
                        ,plugins: [new Ext.ux.plugins.IconCombo()]
                    });
                }
            }

            ,plugins: [
                {
                    ptype: 'CBDDGrid'
                    ,enableDrop: true
                    ,dropZoneConfig:  {
                        onNodeOver: this.onNodeDragOver.createDelegate(this)
                        ,onNodeDrop: this.onNodeDrop.createDelegate(this)
                    }
                }
            ]
        });
        this.addEvents('change', 'fileupload', 'filedownload', 'filesdelete', 'loaded', 'saveobject');
        this.enableBubble(['change', 'fileupload', 'filedownload', 'filesdelete', 'loaded', 'saveobject']);
        CB.VerticalEditGrid.superclass.initComponent.apply(this, arguments);
    }

    ,initRenderers: function () {
        this.renderers = {
            iconcombo: App.customRenderers.iconcombo

            ,H: function(){ return '';}

            ,title: function(v, meta, record, row_idx, col_idx, store){
                var id = record.get('id');

                var n = this.helperTree.getNode(id);
                // temporary workaround for not found nodes
                if(!n) {
                    return v;
                }
                var tr = n.attributes.templateRecord;
                if(tr.get('type') == 'H'){
                    meta.css ='vgh';
                }else{
                    meta.css = 'bgcLG vaT';
                    meta.attr = 'style="margin-left: '+(n.getDepth()-1)+'0px"';
                }
                if(!Ext.isEmpty(tr.get('cfg').hint)) {
                    meta.attr += ' title="'+tr.get('cfg').hint+'"';
                }
                /* setting icon for duplicate fields /**/
                if(this.helperTree.isDuplicate(id)){
                    //show duplicate index
                    // if last (and not exsceeded) then show + icon
                    if(this.helperTree.canDuplicate(id) && this.helperTree.isLastDuplicate(id)) {
                        v = '<img name="add_duplicate" title="'+L.addDuplicateField+'" class="fr duplicate-plus" src="'+Ext.BLANK_IMAGE_URL + '" / >' + v;
                    } else {
                        idx = this.helperTree.getDuplicateIndex(id) +1;
                        v = '<img title="'+L.duplicate+' '+idx+'" class="fr duplicate'+idx+'" src="'+Ext.BLANK_IMAGE_URL + '" / >' + v;
                    }
                }
                return v;
            }

            ,value: function(v, meta, record, row_idx, col_idx, store){
                var n = this.helperTree.getNode(record.get('id'));
                // temporary workaround for not found nodes
                if(!n) {
                    return v;
                }
                var tr = n.attributes.templateRecord;

                if(this.renderers && this.renderers[tr.get('type')]) {
                    return this.renderers[tr.get('type')](v, this);
                }
                if(!Ext.isEmpty(tr.get('cfg').height)) {
                    meta.attr = ' style="min-height:' + tr.get('cfg').height + 'px"';
                }

                if(Ext.isEmpty(v)) return '';
                var renderer = App.getCustomRenderer(tr.get('type'));
                if(Ext.isEmpty(renderer)) {
                    return v;
                }
                return renderer(v, meta, record, row_idx, col_idx, store, this);
            }

        };
    }

    ,initColumns: function() {

        this.gridColumns = [
            {
                header: L.Property
                // ,width: 200
                ,dataIndex: 'title'
                ,editable: false
                ,scope: this
                ,renderer: this.renderers.title
            },{
                header: L.Value
                ,id: 'value'
                // ,width: 200
                ,dataIndex: 'value'
                ,editor: new Ext.form.TextField()
                ,scope: this
                ,resizable: true
                ,renderer: this.renderers.value
            },{
                header: L.Additionally
                // ,width: 200
                ,dataIndex: 'info'
                ,editor: new Ext.form.TextField()
                ,hideable: false
            }
        ];

    }

    ,onNodeDragOver: function (targetData, source, e, data){
        var rez = this.dropZone.dropNotAllowed;
        if(!targetData.record ||
            Ext.isEmpty(data.data) ||
            isNaN(data.data[0].id)
        ) {
            return rez;
        }

        var node = this.helperTree.getNode(targetData.record.get('id'));
        var tr = node.attributes.templateRecord;

        return ((tr.get('type') == '_objects')
            ? this.dropZone.dropAllowed
            : this.dropZone.dropNotAllowed
        );
    }

    ,onNodeDrop: function(targetData, source, e, sourceData){
        var dz = this.dropZone;

        if(this.onNodeDragOver(targetData, source, e, sourceData) == dz.dropAllowed){
            if(targetData.record) {
                var bt = this.getBubbleTarget();
                var node = this.helperTree.getNode(targetData.record.get('id'));
                var tr = node.attributes.templateRecord;
                var v = toNumericArray(node.attributes.value.value);

                var idx = null;


                for (var i = 0; i < sourceData.data.length; i++) {
                    idx = v.indexOf(sourceData.data[i].id);
                    if(idx >= 0) {
                        v.splice(idx, 1);
                    } else {
                        v.push(sourceData.data[i].id);
                        if(bt.objectsStore) {
                            bt.objectsStore.checkRecordExistance(sourceData.data[i]);
                        }
                    }
                }
                v = v.join(',');
                targetData.record.set('value', v);
                this.fireEvent('change');
            }
            return true;
        }
    }

    ,onCellClick: function(g, r, c, e){
        var el = e.getTarget();
        if(el) {
            switch(el.name){
                case 'add_duplicate':
                    this.onDuplicateFieldClick();
                    break;
            }
        }
    }

    ,onPopupMenu: function(g, r, c, e){
        e.preventDefault();
        switch(g.getColumnModel().getDataIndex(c)){
            case 'title':
                this.showTitlePopupMenu(g, r, c, e);
                break;
        }
    }

    ,showTitlePopupMenu: function(grid, rowIndex, cellIndex, e){
        r = grid.getStore().getAt(rowIndex);
        this.popupForRow = rowIndex;
        if(!this.titlePopupMenu) this.titlePopupMenu = new Ext.menu.Menu({
            items: [
                {
                    text: L.addDuplicateField
                    ,scope: this
                    ,handler: this.onDuplicateFieldClick
                },{
                    text: L.delDuplicateField
                    ,scope: this
                    ,handler: this.onDeleteDuplicateFieldClick
                }
            ]
        });
        this.titlePopupMenu.items.itemAt(0).setDisabled(!this.helperTree.canDuplicate(r.get('id')));
        this.titlePopupMenu.items.itemAt(1).setDisabled(this.helperTree.isFirstDuplicate(r.get('id')));
        this.titlePopupMenu.showAt(e.getXY());
    }

    ,onFieldTitleDblClick: function(){
        var sm = this.getSelectionModel();
        var cm = this.getColumnModel();
        var s = sm.getSelectedCell();
        var gv = this.getView();

        if(Ext.isEmpty(s)) return;
        var fieldName = cm.getDataIndex(s[1]);
        if(fieldName == 'title'){
            c = gv.getCell(s[0], s[1]);
            c.className = c.className.replace( (c.className.indexOf(' x-grid3-cell-selected') >= 0 ? ' x-grid3-cell-selected' : 'x-grid3-cell-selected'), '');
            s[1] = cm.findColumnIndex('value');
            this.getView().focusCell(s[0], s[1], false, false);
            this.startEditing(s[0], s[1]);//begin field edit
        }
    }

    ,getBubbleTarget: function(){
        if(!this.parentWindow){
            this.parentWindow = this.findParentByType('CBGenericForm') || this.refOwner;
        }
        return this.parentWindow;
    }

    ,reload: function(){
        // initialization
        this.data = {};
        this.newItem = true;
        var pw = this.getBubbleTarget(); //parent window

        if(Ext.isDefined(pw.data)) {
            this.newItem = isNaN(pw.data.id);
            if(Ext.isDefined(pw.data[this.root])) {
                this.data = pw.data[this.root];
            }
        }
        //if not specified template_id directly to grid then try to look in owners data
        this.template_id = Ext.value(pw.data.template_id, this.template_id);
        if(isNaN(this.template_id)) {
            return Ext.Msg.alert('Error', 'No template id specified in data for "' + pw.title + '" window.');
        }
        this.template_id = parseInt(this.template_id, 10);

        this.templateStore = CB.DB['template' + this.template_id];

        var idx = CB.DB.templates.findExact('id', this.template_id);
        if(idx >= 0) {
            var cm = this.getColumnModel();
            var tc = CB.DB.templates.getAt(idx).get('cfg');//template config

            idx = cm.findColumnIndex('info');
            var colExists = (idx >=0 );
            var colRequired = (
                (tc.infoColumn === true) ||
                (
                    (!Ext.isDefined(tc.infoColumn)) &&
                    (!Ext.isEmpty(App.config.template_info_column))
                )
            );

            var newConfig = Ext.apply([], this.gridColumns);
            if(colExists !== colRequired) {
                if(!colRequired) {
                    newConfig.pop();
                }
                // newConfig.push({
                //     header: ''
                //     ,dataIndex: 'id'
                //     ,hideable: false
                //     ,width: 3
                //     ,resizable: false
                //     ,renderer: Ext.emptyFn
                // });

                cm.setConfig(newConfig);
                var el = this.getEl();
                if(el && el.isVisible(true)) {
                    this.getView().refresh(true);
                }
            }
        }
        // if parent have a helperTree then it is responsible for helper reload
        if(!pw.helperTree) {
            this.helperTree.newItem = this.newItem;
            this.helperTree.loadData(this.data, this.templateStore);
        }

        this.syncRecordsWithHelper();

        this.fireEvent('loaded', this);
    }

    ,syncRecordsWithHelper: function(){
        if(!this.store) {
            return;
        }

        // remember last selected cell
        var lastCell = this.getSelectionModel().getSelectedCell();

        var nodesList = this.helperTree.queryNodeListBy(this.helperNodesFilter.createDelegate(this));

        if(this.store && this.store.suspendEvents) {
            this.store.suspendEvents(true);
        }

        this.store.removeAll(false);

        var records = [];
        for (var i = 0; i < nodesList.length; i++) {
            var attr = nodesList[i].attributes;
            var r  = attr.templateRecord;
            records.push(
                new this.store.recordType({
                    id: attr.id
                    ,title: r.get('title')
                    ,readonly: ((r.get('type') == 'H') || (r.get('cfg').readOnly == 1))
                    ,value: attr.value.value
                    ,info: attr.value.info
                    ,type: r.get('type')
                    ,cond: attr.value.cond
                })
            );
        }
        this.store.resumeEvents();
        this.store.add(records);

        if(lastCell && this.getEl().isVisible(true)){
            this.getSelectionModel().select(lastCell[0], lastCell[1]);
        }
    }

    ,helperNodesFilter: function(node){
        var r = node.attributes.templateRecord;
        //skip check for root node
        if(Ext.isEmpty(r)) {
            return false;
        }

        return (
            (
                (r.get('cfg').showIn != 'top') ||
                ((r.get('cfg').showIn == 'top') &&
                    this.includeTopFields
                )
            ) &&
            (r.get('cfg').showIn != 'tabsheet') &&
            (node.attributes.visible !== false)
        );
    }

    ,readValues: function(){
        if(!Ext.isDefined(this.data)) {
            this.data = {};
        }

        this.data = this.helperTree.readValues();

        w = this.getBubbleTarget();
        if(Ext.isDefined(w.data)) {
            w.data[this.root] = this.data;
        }
    }

    ,onBeforeEditProperty: function(e){//grid, record, field, value, row, column, cancel

        var node = this.helperTree.getNode(e.record.get('id'));
        // temporary workaround for not found nodes
        if(!node) {
            e.cancel = true;
            return;
        }
        var tr = node.attributes.templateRecord;
        if((tr.get('type') == 'H') || (tr.get('cfg').readOnly == 1) ){
            e.cancel = true;
            return;
        }
        if(e.field != 'value') return;

        var pw = this.findParentByType(CB.GenericForm, false)
            || this.refOwner
        ; //CB.Objects & CB.TemplateEditWindow
        var t = tr.get('type');
        if(pw && !Ext.isEmpty(pw.data)){
            e.objectId = pw.data.id;
            e.path = pw.data.path;
        }

        /* get and set pidValue if dependent */
        if( (Ext.isDefined(tr.get('cfg').dependency) ) && !Ext.isEmpty(tr.get('pid')) ) {
                e.pidValue = this.helperTree.getParentValue(e.record.get('id'), tr.get('pid'));
        }

        var col = e.grid.colModel.getColumnAt(e.column);
        var ed = col.getEditor();
        if(ed) {
            ed.destroy();
        }
        if(this.editors && this.editors[t]) {
            col.setEditor(new Ext.grid.GridEditor(this.editors[t](this)));
        }else{
            e.fieldRecord = this.helperTree.getNode(e.record.get('id')).attributes.templateRecord;
            var te = App.getTypeEditor(t, e);
            if(e.cancel) {
                return ;
            }
            this.attachKeyListeners(te);
            var ge = new Ext.grid.GridEditor(te);
            col.setEditor(ge);
        }
    }

    ,gainFocus: function(){
        this.focus(false);
        var sm = this.getSelectionModel();
        if(sm && sm.getSelectedCell) {
            var s = sm.getSelectedCell();
            if(s) {
                this.getView().focusCell(s[0], s[1]);
            }
        }
    }

    ,attachKeyListeners: function(comp) {
        if(Ext.isEmpty(comp)) {
            return;
        }
        comp.on(
            'afterrender'
            ,function(c)
            {
                var map = new Ext.KeyMap(c.getEl(), [
                    {
                        key: "s"
                        ,ctrl: true
                        ,shift: false
                        ,scope: this
                        ,stopEvent: true
                        ,fn: this.onSaveObjectEvent
                    }
                ]);
            }
            ,this);
    }
    ,onSaveObjectEvent: function (key, event){
        if(this.editing) {
            this.stopEditing(false);
        }
        this.fireEvent('saveobject');
    }

    ,onAfterEditProperty: function(e){

        if(e.field == 'value'){
            if(e.value != e.originalValue){
                this.helperTree.resetChildValues(e.record.get('id'));
            }
        }

        if(e.value != e.originalValue) {
            this.fireEvent('change');
        }

        this.syncRecordsWithHelper();
        this.gainFocus();

    }

    ,getFieldValue: function(field_id, duplication_id){
        //TODO: review
        result = null;

        this.store.each(
            function(r){
                if((r.get('field_id') == field_id) && (r.get('duplicate_id') == duplication_id)){
                    result = r.get('value');
                    return false;
                }
            }
            ,this
        );
        return result;
    }

    ,onDuplicateFieldClick: function(b){
        var s = this.getSelectionModel().getSelectedCell();
        if(Ext.isEmpty(s)) {
            return;
        }
        r = this.store.getAt(s[0]);
        this.helperTree.duplicate(r.get('id'));
        this.syncRecordsWithHelper();
        this.fireEvent('change');
    }

    ,onDeleteDuplicateFieldClick: function(b){
        var s = this.getSelectionModel().getSelectedCell();
        if(Ext.isEmpty(s)) {
            return;
        }
        r = this.store.getAt(s[0]);
        this.helperTree.deleteDuplicate(r.get('id'));
        this.syncRecordsWithHelper();
        this.fireEvent('change');
    }
});

Ext.reg('CBVerticalEditGrid', CB.VerticalEditGrid);
